Libraries to create REST Web Services:
--------------------------------------
1. RESTlets
2. RESTEasy
3. Jersey


Difference between Jersey and JAX-RS:
---------------------------------------
1. JAX-RS is an specification (just a definition) and Jersey is a JAX-RS implementation. 
2. Jersey framework is more than the JAX-RS Reference Implementation. 
3. Jersey provides its own API that extend the JAX-RS toolkit with additional features and utilities to 
   further simplify RESTful service and client development.

What is Jersey in Web Services:
--------------------------------
Jersey RESTful Web Services framework is open source, production quality, framework for developing RESTful Web Services in 
Java that provides support for JAX-RS APIs and serves as a JAX-RS (JSR 311 & JSR 339) Reference Implementation.

What is JAX-RS:
-----------------
JAX-RS: Java API for RESTful Web Services (JAX-RS) is a Java programming language API specification that provides support in 
creating web services according to the Representational State Transfer (REST) architectural pattern.    

What is difference between JAX WS and JAX RS:
-----------------------------------------------  
1. Message exchange between the client and the server performed through XML- based SOAP messages. 
2. Clients of the JAX-WS Web-Service need a WSDL file to generate executable code that the clients 
   can use to call Web- Service. 
3. JAX-RS - Java API for RESTful Web Services.
 
What is Jersey and Resteasy:
---------------------------- 
The RESTEasy is another good JBoss project that provides various frameworks to help you build RESTful Web Services and 
RESTful Java applications. It is a fully certified and portable implementation of the JAX-RS specification. ... 
That's all about the difference between JAX-RS, Restlet, and Jersey in Java.
   
   
   
=======================================================================================================
Youtube Tutorial URL:
---------------------
https://www.youtube.com/watch?v=2QD1sOG8pyU&list=PLqq-6Pq4lTTZh5U8RbdXq0WaYvZBz2rbn&index=13


Creating REST Web Services using Maven:
---------------------------------------
1. Open new select Maven project
2. select "use default workspace"
3. choose type of maven proj(in search type "jersey") "jersey" --> "org.glassfish.jersey.archtype -> jersey-quickstart-webapp"

	Add archtype:
	------------
	group Id = org.glassfish.jersey.archetypes
	archtype Id = jersey-Quickstart-webapp
	version = 2.16
	Repository url = leave empty

proj details:
---------------
Group Id = org.tutorials.kp
artifact Id = messangers
Version = 0.0.1-SNAPSHOT
package = org.tutorials.kp.messangers


web.xml information:
--------------------
1. you have to sepcify "ServletContainer" class.
2. You have to specify base package in "init-param" tags(param-name,param-value)
3. you have to specify mapping url 
=========================================================================================
if you get folowing error:
----------------------------
Can't resolve Archetype org.glassfish.jersey.archetypes:jersey-Quickstart-webapp:2.16

1. Open Window > Preferences
2. Open Maven > Archetypes
3. Click Add Remote Catalog and add the following:
4. Catalog File: http://repo1.maven.org/maven2/archetype-catalog.xml
5. Description: maven catalog
6. Restart eclipse
===============================================================================
To Return XML Response:
------------------------
1. use "@Produces(MediaType.APPLICATION_XML)" annotation [Packages: javax.ws.rs.Produces, javax.ws.rs.core.MediaType]
2. For model class use "@XmlRootElement" [Package: javax.xml.bind.annotation.XmlRootElement]

=======================================================================================
To Return Json Response:
------------------------
1. Uncomment/add Following dependency in pom.xml
	<dependency>
		<groupId>org.glassfish.jersey.media</groupId>
		<artifactId>jersey-media-moxy</artifactId>
	</dependency>
	
	or 
	
	<dependency>
		<groupId>org.glassfish.jersey.media</groupId>
		<artifactId>jersey-media-json-binding</artifactId>
	</dependency>
	
2. use "@Produces(MediaType.APPLICATION_JSON)" annotation [Packages: javax.ws.rs.Produces, javax.ws.rs.core.MediaType]
==========================================================================================================================
Using Post Method and Setting/Sending Status Codes:
---------------------------------------------------

	@POST
	@Consumes(MediaType.APPLICATION_JSON) //To sepcify that it accepts json as request
	@Produces(MediaType.APPLICATION_JSON) //To specify that it returns json as response
	public Response addMessage(Message message1, @Context UriInfo uriInfo){
		
		System.out.println("Absolute Path = " + uriInfo.getAbsolutePath());
		
		// Get Id form new message object
		String newId = String.valueOf(message1.getId());
		
		//by using getAbsolutePathBuilder() you will get "absolutePath" and path() method will add the value to that path, then use build() method to build that url
		java.net.URI uri = uriInfo.getAbsolutePathBuilder().path(newId).build();
		
		Message newMessageObject = new Message(message1.getId(), message1.getChatMessage(), message1.getAuthor());
		
		return Response.created(uri)
						.status(Status.CREATED)
						.entity(newMessageObject)
						.header("name1", "Pradeep Asha")
						.build();
	}
=========================================================================================================================
Accessing Path Params:
-----------------------------
	@GET
	@Path("/{messageId}")
	@Produces(MediaType.APPLICATION_JSON)
	public Message getMessage(@PathParam("messageId") int messageId)
	{
		
		if(messageId == 1){
			Message msg = new Message(1,"Hello Pradeep!!!", "Asha Latha");
			return msg;
		}
		else
		{
			Message msg = new Message(2,"Hello Asha!!!", "Pradeep");
			return msg;
		}
	}
======================================================================================================================
Accessing Query Params:
------------------------
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Message getMessage(@QueryParam("year") int year)
	{
		
		if(year == 2018){
			Message msg = new Message(1,"Hello Pradeep!!!", "Asha Latha");
			return msg;
		}
		else
		{
			Message msg = new Message(2,"Hello Asha!!!", "Pradeep");
			return msg;
		}
	}
==================================================================================
Accessing Other Params:
-----------------------
1. Matrix params (javax.ws.rs.MatrixParam)(ex:- http://localhost:8088/messangers/webapi/sampleMesg;param1=value123)
2. Header params (javax.ws.rs.HeaderParam)
3. Cookie params (javax.ws.rs.CookieParam)
4. UriInfo (Gives entire information about url)

	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public String getMessage(@MatrixParam("param1") String param1, 
							 @HeaderParam("customHeaderValue") String headerValue,
							 @CookieParam("cookieName1") String cookieValue){
		return "Matrix Param= " + param1 + "  Header Param " + headerValue + " Cookie Value" + cookieValue;
		
	}

	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public String getParamsUsingContext(@Context UriInfo uriInfo, @Context HttpHeaders headers)
	{	
		//Package Info
		//javax.ws.rs.core.Context
		//javax.ws.rs.core.UriInfo
		
		String path = uriInfo.getAbsolutePath().toString();
		String cookie = headers.getCookies().toString();
		return "Path Info = " + path + "  Cookie" + cookie;
		
	}
=======================================================================================
Accessing Bean Params:
--------------------------
1. First create beans class

	import javax.ws.rs.QueryParam;

	public class MessageFilterBean{

		private @QueryParam ("year") int year;
		private @QueryParam ("start") int start;
		private @QueryParam ("size") int size;
		
		create getters and setters
		
	}

2. Use them in service class

	@Path("/messages")
	public class MessageResource(){

		@GET
		public List<Messages> listMessages(@BeanParam MessageFilterBean filterBean){
		
			if (year > 0){}
			
			if(start >=0 && size >=0){}
			
			
		}
	}
===============================================================================================
Handling Exception:
-------------------
1. If resource does not catches exceptions, it throws to JAX-RS.
2. Now JAX.RS looks at all exception mappers that have been annotated with "Provider" and check if it maps the exception.
3. Here i have created Generic Exception Mapper to handle all excpetions.

package org.tutorials.kp.messangers.exceptions;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;
import org.tutorials.kp.messangers.models.ErrorMessage;

@Provider
public class GenericExceptionMapper implements ExceptionMapper<Throwable> {

	@Override
	public Response toResponse(Throwable ex) {
		// TODO Auto-generated method stub
		ErrorMessage errorMessage = new ErrorMessage(500, "https://www.google.com", ex.getMessage());;
		return Response.status(Status.INTERNAL_SERVER_ERROR)
					   .entity(errorMessage)
					   .build();
	}

}

============================================================================================================
Consuming REST Web Services:
----------------------------
Jars require to consume REST Web Services:
---------------------------------------------
	1. commons-codec-1.9        yes
	2. commons-logging-1.2		 yes
	3. httpclient-4.5			yes
	4. httpcore-4.4.1			yes
	5. json-simple-1.1			yes

	6.  httpmime-4.5
	7.  jna-4.1.0
	8.  jna-platform-4.1.0
	9.  fluent-hc-4.5
	10.  httpclient-cache-4.5
	11. httpclient-win-4.5


package org.tutorials.kp.messangers.sampletest;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;

public class ConsumeRestWebService {

	public static void main(String[] args) throws ClientProtocolException, IOException{
		// TODO Auto-generated method stub
		HttpClient client;
		client = HttpClientBuilder.create().build();
		HttpGet request = new HttpGet("http://localhost:8085/messangers/webapi/sampleMesg/1");
		HttpResponse response = client.execute(request);
		BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
		String line = " ";
		while((line = rd.readLine()) != null){
			System.out.println(line);
		}
	}

}

Output:
-------
{"author":"Asha Latha","chatMessage":"Hello Pradeep!!!","id":1}
